"""
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–æ–º
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session

from database.database import get_db
from database.models import User
from keyboards.language import get_language_keyboard, get_language_settings_keyboard
from keyboards.inline import get_main_menu_keyboard
from locales.translations import get_text, is_supported_language

router = Router()

@router.message(F.text == "/language")
async def language_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
    await show_language_settings(message)

@router.callback_query(F.data == "language_settings")
async def show_language_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞"""
    await callback.message.edit_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:",
        reply_markup=get_language_settings_keyboard()
    )

@router.callback_query(F.data.startswith("language:"))
async def select_language(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    lang = callback.data.split(":")[1]
    
    if not is_supported_language(lang):
        await callback.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ FSM
    await callback.message.edit_text(
        get_text('language_changed', lang),
        reply_markup=get_main_menu_keyboard(lang)
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    await show_main_menu(callback, lang)

@router.callback_query(F.data.startswith("set_language:"))
async def set_language(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
    lang = callback.data.split(":")[1]
    
    if not is_supported_language(lang):
        await callback.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
    
    if user:
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.language = lang
        db.commit()
        db.close()
        
        await callback.answer(get_text('language_changed', lang), show_alert=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
        await show_main_menu(callback, lang)
    else:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

async def show_main_menu(callback: CallbackQuery, lang: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
    await callback.message.edit_text(
        get_text('main_menu', lang),
        reply_markup=get_main_menu_keyboard(lang)
    )

def get_user_language(telegram_id: int, db: Session) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user = db.query(User).filter(User.telegram_id == telegram_id).first()
    return user.language if user else 'ru' 