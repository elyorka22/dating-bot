import json
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session

from database.database import get_db
from database.models import User
from keyboards.inline import get_main_menu_keyboard
from keyboards.profile import get_profile_edit_keyboard, get_interests_edit_keyboard
from locales.translations import get_text
from config import MIN_AGE, MAX_AGE, MIN_HEIGHT, MAX_HEIGHT, MIN_WEIGHT, MAX_WEIGHT, MARITAL_STATUSES, INTERESTS

router = Router()

class ProfileEditStates(StatesGroup):
    waiting_for_age = State()
    waiting_for_height = State()
    waiting_for_weight = State()
    waiting_for_marital_status = State()
    waiting_for_interests = State()
    waiting_for_bio = State()

def get_user_language(telegram_id: int, db: Session) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.query(User).filter(User.telegram_id == telegram_id).first()
    return user.language if user else 'ru'

@router.callback_query(F.data == "edit_profile")
async def show_profile_edit_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = get_user_language(callback.from_user.id, db)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.message.edit_text(
                get_text('error_not_registered', lang),
                reply_markup=get_main_menu_keyboard(lang)
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = f"{get_text('profile_title', lang)}\n\n"
        profile_text += f"{get_text('profile_gender', lang, gender=user.gender)}\n"
        profile_text += f"{get_text('profile_age', lang, age=user.age)}\n"
        profile_text += f"{get_text('profile_height', lang, height=user.height)}\n"
        profile_text += f"{get_text('profile_weight', lang, weight=user.weight)}\n"
        profile_text += f"{get_text('profile_marital', lang, status=user.marital_status)}\n"
        
        if user.interests:
            try:
                interests = json.loads(user.interests)
                if interests:
                    profile_text += f"{get_text('profile_interests', lang, interests=', '.join(interests))}\n"
            except:
                pass
        
        if user.bio:
            profile_text += f"\n{get_text('profile_bio', lang, bio=user.bio)}\n"
        
        profile_text += f"\n{get_text('settings_change_age', lang)}"
        
        await callback.message.edit_text(
            profile_text,
            reply_markup=get_profile_edit_keyboard(lang)
        )
        
    except Exception as e:
        lang = get_user_language(callback.from_user.id, db)
        await callback.message.edit_text(
            get_text('error_occurred', lang),
            reply_markup=get_main_menu_keyboard(lang)
        )
        print(f"Profile edit error: {e}")
    finally:
        db.close()

@router.callback_query(F.data == "edit_age")
async def edit_age(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    db = next(get_db())
    lang = get_user_language(callback.from_user.id, db)
    db.close()
    
    await callback.message.edit_text(
        get_text('registration_age', lang)
    )
    await state.set_state(ProfileEditStates.waiting_for_age)

@router.message(ProfileEditStates.waiting_for_age)
async def handle_age_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(message.text)
        if MIN_AGE <= age <= MAX_AGE:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = next(get_db())
            try:
                lang = get_user_language(message.from_user.id, db)
                user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
                user.age = age
                db.commit()
                
                await message.answer(
                    f"‚úÖ {get_text('profile_age', lang, age=age)}\n\n"
                    f"{get_text('btn_save', lang)}!",
                    reply_markup=get_main_menu_keyboard(lang)
                )
                await state.clear()
                
            except Exception as e:
                await message.answer(get_text('error_occurred', lang))
                print(f"Age edit error: {e}")
            finally:
                db.close()
        else:
            db = next(get_db())
            lang = get_user_language(message.from_user.id, db)
            db.close()
            await message.answer(get_text('error_invalid_age', lang))
    except ValueError:
        db = next(get_db())
        lang = get_user_language(message.from_user.id, db)
        db.close()
        await message.answer(get_text('error_invalid_age', lang))

@router.callback_query(F.data == "edit_height")
async def edit_height(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞"""
    await callback.message.edit_text(
        f"üìè –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º (–æ—Ç {MIN_HEIGHT} –¥–æ {MAX_HEIGHT}):"
    )
    await state.set_state(ProfileEditStates.waiting_for_height)

@router.message(ProfileEditStates.waiting_for_height)
async def handle_height_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—Å—Ç–∞"""
    try:
        height = int(message.text)
        if MIN_HEIGHT <= height <= MAX_HEIGHT:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = next(get_db())
            try:
                user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
                user.height = height
                db.commit()
                
                await message.answer(
                    f"‚úÖ –†–æ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {height} —Å–º\n\n"
                    "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
                    reply_markup=get_main_menu_keyboard()
                )
                await state.clear()
                
            except Exception as e:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
                print(f"Height edit error: {e}")
            finally:
                db.close()
        else:
            await message.answer(f"–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {MIN_HEIGHT} –¥–æ {MAX_HEIGHT} —Å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@router.callback_query(F.data == "edit_weight")
async def edit_weight(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Å–∞"""
    await callback.message.edit_text(
        f"‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥ (–æ—Ç {MIN_WEIGHT} –¥–æ {MAX_WEIGHT}):"
    )
    await state.set_state(ProfileEditStates.waiting_for_weight)

@router.message(ProfileEditStates.waiting_for_weight)
async def handle_weight_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Å–∞"""
    try:
        weight = int(message.text)
        if MIN_WEIGHT <= weight <= MAX_WEIGHT:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = next(get_db())
            try:
                user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
                user.weight = weight
                db.commit()
                
                await message.answer(
                    f"‚úÖ –í–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {weight} –∫–≥\n\n"
                    "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
                    reply_markup=get_main_menu_keyboard()
                )
                await state.clear()
                
            except Exception as e:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
                print(f"Weight edit error: {e}")
            finally:
                db.close()
        else:
            await message.answer(f"–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {MIN_WEIGHT} –¥–æ {MAX_WEIGHT} –∫–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@router.callback_query(F.data == "edit_marital")
async def edit_marital(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    from keyboards.inline import get_marital_status_keyboard
    
    await callback.message.edit_text(
        "üíç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=get_marital_status_keyboard()
    )
    await state.set_state(ProfileEditStates.waiting_for_marital_status)

@router.callback_query(F.data.startswith("marital:"))
async def handle_marital_edit(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    marital_status = callback.data.split(":")[1]
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        user.marital_status = marital_status
        db.commit()
        
        await callback.answer("‚úÖ –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        await show_profile_edit_menu(callback)
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True)
        print(f"Marital edit error: {e}")
    finally:
        db.close()

@router.callback_query(F.data == "edit_interests")
async def edit_interests(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    db = next(get_db())
    
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        current_interests = []
        
        if user.interests:
            try:
                current_interests = json.loads(user.interests)
            except:
                pass
        
        await callback.message.edit_text(
            f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (—Ç–µ–∫—É—â–∏–µ: {', '.join(current_interests) if current_interests else '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}):",
            reply_markup=get_interests_edit_keyboard(current_interests)
        )
        await state.set_state(ProfileEditStates.waiting_for_interests)
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤", show_alert=True)
        print(f"Interests edit error: {e}")
    finally:
        db.close()

@router.callback_query(F.data.startswith("interest_edit:"))
async def handle_interest_edit(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    interest = callback.data.split(":")[1]
    data = await state.get_data()
    selected_interests = data.get("interests", [])
    
    if interest in selected_interests:
        selected_interests.remove(interest)
    else:
        selected_interests.append(interest)
    
    await state.update_data(interests=selected_interests)
    
    interests_text = ", ".join(selected_interests) if selected_interests else "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
    await callback.message.edit_text(
        f"üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {interests_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=get_interests_edit_keyboard(selected_interests)
    )

@router.callback_query(F.data == "interests_save")
async def save_interests(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    data = await state.get_data()
    selected_interests = data.get("interests", [])
    
    db = next(get_db())
    
    try:
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        user.interests = json.dumps(selected_interests, ensure_ascii=False)
        db.commit()
        
        interests_text = ", ".join(selected_interests) if selected_interests else "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
        await callback.answer(f"‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {interests_text}", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        await show_profile_edit_menu(callback)
        await state.clear()
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤", show_alert=True)
        print(f"Save interests error: {e}")
    finally:
        db.close()

@router.callback_query(F.data == "edit_bio")
async def edit_bio(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ —Å–µ–±–µ"""
    await callback.message.edit_text(
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ):"
    )
    await state.set_state(ProfileEditStates.waiting_for_bio)

@router.message(ProfileEditStates.waiting_for_bio)
async def handle_bio_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –æ —Å–µ–±–µ"""
    bio = message.text if message.text != "-" else None
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        user.bio = bio
        db.commit()
        
        if bio:
            await message.answer(
                f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                f"–û —Å–µ–±–µ:\n{bio}\n\n"
                "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer(
                "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!\n\n"
                "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
                reply_markup=get_main_menu_keyboard()
            )
        await state.clear()
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
        print(f"Bio edit error: {e}")
    finally:
        db.close() 