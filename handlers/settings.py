import json
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session

from database.database import get_db
from database.models import User, SearchSettings
from keyboards.inline import get_main_menu_keyboard
from keyboards.settings import (
    get_gender_preference_keyboard, get_age_range_keyboard,
    get_height_range_keyboard, get_weight_range_keyboard,
    get_marital_preference_keyboard, get_settings_menu_keyboard
)
from locales.translations import get_text
from config import MIN_AGE, MAX_AGE, MIN_HEIGHT, MAX_HEIGHT, MIN_WEIGHT, MAX_WEIGHT, MARITAL_STATUSES

router = Router()

class SettingsStates(StatesGroup):
    waiting_for_gender_preference = State()
    waiting_for_min_age = State()
    waiting_for_max_age = State()
    waiting_for_min_height = State()
    waiting_for_max_height = State()
    waiting_for_min_weight = State()
    waiting_for_max_weight = State()
    waiting_for_marital_preference = State()

def get_user_language(telegram_id: int, db: Session) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.query(User).filter(User.telegram_id == telegram_id).first()
    return user.language if user else 'ru'

@router.callback_query(F.data == "search_settings")
async def show_settings_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞"""
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = get_user_language(callback.from_user.id, db)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not current_user:
            await callback.message.edit_text(
                get_text('error_not_registered', lang),
                reply_markup=get_main_menu_keyboard(lang)
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        search_settings = db.query(SearchSettings).filter(SearchSettings.user_id == current_user.id).first()
        if not search_settings:
            await callback.message.edit_text(
                get_text('error_not_registered', lang),
                reply_markup=get_main_menu_keyboard(lang)
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        settings_text = f"{get_text('settings_title', lang)}\n\n"
        settings_text += f"{get_text('settings_gender', lang, preference=search_settings.gender_preference)}\n"
        settings_text += f"{get_text('settings_age', lang, min=search_settings.min_age, max=search_settings.max_age)}\n"
        settings_text += f"{get_text('settings_height', lang, min=search_settings.min_height, max=search_settings.max_height)}\n"
        settings_text += f"{get_text('settings_weight', lang, min=search_settings.min_weight, max=search_settings.max_weight)}\n"
        
        if search_settings.marital_status_preference:
            try:
                marital_prefs = json.loads(search_settings.marital_status_preference)
                settings_text += f"{get_text('settings_marital', lang, preference=', '.join(marital_prefs))}\n"
            except:
                settings_text += f"{get_text('settings_marital', lang, preference=get_text('btn_all', lang))}\n"
        
        settings_text += f"\n{get_text('settings_change_gender', lang)}"
        
        await callback.message.edit_text(
            settings_text,
            reply_markup=get_settings_menu_keyboard(lang)
        )
        
    except Exception as e:
        lang = get_user_language(callback.from_user.id, db)
        await callback.message.edit_text(
            get_text('error_occurred', lang),
            reply_markup=get_main_menu_keyboard(lang)
        )
        print(f"Settings error: {e}")
    finally:
        db.close()

@router.callback_query(F.data == "change_gender_preference")
async def change_gender_preference(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–æ–ª—É"""
    db = next(get_db())
    lang = get_user_language(callback.from_user.id, db)
    db.close()
    
    await callback.message.edit_text(
        get_text('settings_change_gender', lang),
        reply_markup=get_gender_preference_keyboard(lang)
    )
    await state.set_state(SettingsStates.waiting_for_gender_preference)

@router.callback_query(F.data.startswith("gender_pref:"))
async def handle_gender_preference(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –ø–æ–ª—É"""
    gender_pref = callback.data.split(":")[1]
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = get_user_language(callback.from_user.id, db)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not current_user:
            await callback.message.edit_text(
                get_text('error_not_registered', lang),
                reply_markup=get_main_menu_keyboard(lang)
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        search_settings = db.query(SearchSettings).filter(SearchSettings.user_id == current_user.id).first()
        if search_settings:
            search_settings.gender_preference = gender_pref
            db.commit()
            
            await callback.answer(f"‚úÖ {get_text('settings_gender', lang, preference=gender_pref)}", show_alert=True)
        else:
            await callback.answer(get_text('error_occurred', lang), show_alert=True)
            return
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await show_settings_menu(callback)
        
    except Exception as e:
        lang = get_user_language(callback.from_user.id, db)
        await callback.answer(get_text('error_occurred', lang), show_alert=True)
        print(f"Gender preference error: {e}")
    finally:
        db.close()

@router.callback_query(F.data == "change_age_range")
async def change_age_range(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    await callback.message.edit_text(
        f"üìÖ –£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç {MIN_AGE} –¥–æ {MAX_AGE} –ª–µ—Ç):"
    )
    await state.set_state(SettingsStates.waiting_for_min_age)

@router.message(SettingsStates.waiting_for_min_age)
async def handle_min_age_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        min_age = int(message.text)
        if MIN_AGE <= min_age <= MAX_AGE:
            await state.update_data(min_age=min_age)
            await message.answer(
                f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {min_age} –ª–µ—Ç\n\n"
                f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç {min_age} –¥–æ {MAX_AGE} –ª–µ—Ç):"
            )
            await state.set_state(SettingsStates.waiting_for_max_age)
        else:
            await message.answer(f"–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {MIN_AGE} –¥–æ {MAX_AGE} –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@router.message(SettingsStates.waiting_for_max_age)
async def handle_max_age_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        max_age = int(message.text)
        data = await state.get_data()
        min_age = data.get("min_age", MIN_AGE)
        
        if min_age <= max_age <= MAX_AGE:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            db = next(get_db())
            try:
                current_user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
                search_settings = db.query(SearchSettings).filter(SearchSettings.user_id == current_user.id).first()
                
                search_settings.min_age = min_age
                search_settings.max_age = max_age
                db.commit()
                
                await message.answer(
                    f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {min_age}-{max_age} –ª–µ—Ç\n\n"
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
                    reply_markup=get_main_menu_keyboard()
                )
                await state.clear()
                
            except Exception as e:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                print(f"Age settings error: {e}")
            finally:
                db.close()
        else:
            await message.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {min_age} –¥–æ {MAX_AGE} –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@router.callback_query(F.data == "change_height_range")
async def change_height_range(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–æ—Å—Ç–∞"""
    await callback.message.edit_text(
        f"üìè –£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç {MIN_HEIGHT} –¥–æ {MAX_HEIGHT} —Å–º):"
    )
    await state.set_state(SettingsStates.waiting_for_min_height)

@router.message(SettingsStates.waiting_for_min_height)
async def handle_min_height_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞"""
    try:
        min_height = int(message.text)
        if MIN_HEIGHT <= min_height <= MAX_HEIGHT:
            await state.update_data(min_height=min_height)
            await message.answer(
                f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç: {min_height} —Å–º\n\n"
                f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç {min_height} –¥–æ {MAX_HEIGHT} —Å–º):"
            )
            await state.set_state(SettingsStates.waiting_for_max_height)
        else:
            await message.answer(f"–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {MIN_HEIGHT} –¥–æ {MAX_HEIGHT} —Å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@router.message(SettingsStates.waiting_for_max_height)
async def handle_max_height_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞"""
    try:
        max_height = int(message.text)
        data = await state.get_data()
        min_height = data.get("min_height", MIN_HEIGHT)
        
        if min_height <= max_height <= MAX_HEIGHT:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            db = next(get_db())
            try:
                current_user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
                search_settings = db.query(SearchSettings).filter(SearchSettings.user_id == current_user.id).first()
                
                search_settings.min_height = min_height
                search_settings.max_height = max_height
                db.commit()
                
                await message.answer(
                    f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω —Ä–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {min_height}-{max_height} —Å–º\n\n"
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
                    reply_markup=get_main_menu_keyboard()
                )
                await state.clear()
                
            except Exception as e:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                print(f"Height settings error: {e}")
            finally:
                db.close()
        else:
            await message.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {min_height} –¥–æ {MAX_HEIGHT} —Å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@router.callback_query(F.data == "change_weight_range")
async def change_weight_range(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –≤–µ—Å–∞"""
    await callback.message.edit_text(
        f"‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å (–æ—Ç {MIN_WEIGHT} –¥–æ {MAX_WEIGHT} –∫–≥):"
    )
    await state.set_state(SettingsStates.waiting_for_min_weight)

@router.message(SettingsStates.waiting_for_min_weight)
async def handle_min_weight_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞"""
    try:
        min_weight = int(message.text)
        if MIN_WEIGHT <= min_weight <= MAX_WEIGHT:
            await state.update_data(min_weight=min_weight)
            await message.answer(
                f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å: {min_weight} –∫–≥\n\n"
                f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å (–æ—Ç {min_weight} –¥–æ {MAX_WEIGHT} –∫–≥):"
            )
            await state.set_state(SettingsStates.waiting_for_max_weight)
        else:
            await message.answer(f"–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {MIN_WEIGHT} –¥–æ {MAX_WEIGHT} –∫–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@router.message(SettingsStates.waiting_for_max_weight)
async def handle_max_weight_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞"""
    try:
        max_weight = int(message.text)
        data = await state.get_data()
        min_weight = data.get("min_weight", MIN_WEIGHT)
        
        if min_weight <= max_weight <= MAX_WEIGHT:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            db = next(get_db())
            try:
                current_user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
                search_settings = db.query(SearchSettings).filter(SearchSettings.user_id == current_user.id).first()
                
                search_settings.min_weight = min_weight
                search_settings.max_weight = max_weight
                db.commit()
                
                await message.answer(
                    f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω –≤–µ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {min_weight}-{max_weight} –∫–≥\n\n"
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
                    reply_markup=get_main_menu_keyboard()
                )
                await state.clear()
                
            except Exception as e:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                print(f"Weight settings error: {e}")
            finally:
                db.close()
        else:
            await message.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {min_weight} –¥–æ {MAX_WEIGHT} –∫–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@router.callback_query(F.data == "change_marital_preference")
async def change_marital_preference(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Å–µ–º–µ–π–Ω–æ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é"""
    await callback.message.edit_text(
        "üíç –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Å–µ–º–µ–π–Ω–æ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é:",
        reply_markup=get_marital_preference_keyboard()
    )
    await state.set_state(SettingsStates.waiting_for_marital_preference)

@router.callback_query(F.data.startswith("marital_pref:"))
async def handle_marital_preference(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ —Å–µ–º–µ–π–Ω–æ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é"""
    marital_pref = callback.data.split(":")[1]
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        search_settings = db.query(SearchSettings).filter(SearchSettings.user_id == current_user.id).first()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if marital_pref == "all":
            search_settings.marital_status_preference = json.dumps(MARITAL_STATUSES, ensure_ascii=False)
        else:
            search_settings.marital_status_preference = json.dumps([marital_pref], ensure_ascii=False)
        
        db.commit()
        
        await callback.answer("‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Å–µ–º–µ–π–Ω–æ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await show_settings_menu(callback)
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
        print(f"Marital preference error: {e}")
    finally:
        db.close() 