#!/usr/bin/env python3
import os
import sys
import asyncio
import threading
import time
from http.server import HTTPServer, BaseHTTPRequestHandler
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.orm import Session

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from config import BOT_TOKEN, DATABASE_URL
from database.database import get_db, create_tables, check_database_connection
from database.models import User, Request
from handlers.user import get_user_by_telegram_id, create_user, update_user_profile, search_users, is_profile_complete, get_user_profile_text
from handlers.requests import create_request, get_user_requests, update_request_status, can_send_request, get_request_by_id
from keyboards.base import *
from locales.translations import get_text

print("=== –ó–ê–ü–£–°–ö TELEGRAM –ë–û–¢–ê –ó–ù–ê–ö–û–ú–°–¢–í ===")
print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
print(f"PORT: {os.environ.get('PORT', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}")

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class RegistrationStates(StatesGroup):
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_height = State()
    waiting_for_weight = State()
    waiting_for_marital_status = State()
    waiting_for_interests = State()
    waiting_for_bio = State()

class SearchStates(StatesGroup):
    waiting_for_gender = State()
    waiting_for_age_range = State()
    waiting_for_height_range = State()
    waiting_for_weight_range = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_search_results = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    db = next(get_db())
    user = get_user_by_telegram_id(message.from_user.id, db)
    
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            db=db
        )
        await message.answer(get_text('welcome', 'ru'), reply_markup=get_language_keyboard())
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(message, user.language)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@router.callback_query(lambda c: c.data.startswith('lang_'))
async def process_language_selection(callback: CallbackQuery):
    lang = callback.data.split('_')[1]
    db = next(get_db())
    user = get_user_by_telegram_id(callback.from_user.id, db)
    
    if user:
        update_user_profile(user.id, language=lang)
        await callback.message.edit_text(
            get_text('language_changed', lang),
            reply_markup=get_main_menu_keyboard(lang)
        )
    else:
        await callback.message.edit_text(get_text('error', lang))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(lambda c: c.data == 'back_to_main')
async def back_to_main_menu(callback: CallbackQuery):
    db = next(get_db())
    user = get_user_by_telegram_id(callback.from_user.id, db)
    await show_main_menu(callback.message, user.language if user else 'ru')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
@router.callback_query(lambda c: c.data == 'menu_search')
async def menu_search(callback: CallbackQuery):
    db = next(get_db())
    user = get_user_by_telegram_id(callback.from_user.id, db)
    
    if not user or not is_profile_complete(user):
        await callback.message.edit_text(
            get_text('no_profile', user.language if user else 'ru'),
            reply_markup=get_main_menu_keyboard(user.language if user else 'ru')
        )
        return
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = search_users(user.id, db)
    if not users:
        await callback.message.edit_text(
            get_text('no_results', user.language),
            reply_markup=get_main_menu_keyboard(user.language)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    user_search_results[callback.from_user.id] = users
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_user_profile(callback.message, users[0], 0, user.language)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(lambda c: c.data == 'menu_profile')
async def menu_profile(callback: CallbackQuery):
    db = next(get_db())
    user = get_user_by_telegram_id(callback.from_user.id, db)
    
    if not user:
        await callback.message.edit_text(
            get_text('no_profile', 'ru'),
            reply_markup=get_main_menu_keyboard('ru')
        )
        return
    
    profile_text = get_user_profile_text(user, user.language)
    await callback.message.edit_text(
        profile_text,
        reply_markup=get_profile_keyboard(user.language)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query(lambda c: c.data == 'menu_requests')
async def menu_requests(callback: CallbackQuery):
    db = next(get_db())
    user = get_user_by_telegram_id(callback.from_user.id, db)
    
    if not user:
        await callback.message.edit_text(
            get_text('no_profile', 'ru'),
            reply_markup=get_main_menu_keyboard('ru')
        )
        return
    
    requests = get_user_requests(user.id, db, 'pending')
    
    if not requests:
        await callback.message.edit_text(
            "üì® –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
            reply_markup=get_main_menu_keyboard(user.language)
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    await show_request(callback.message, requests[0], user.language)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(lambda c: c.data == 'menu_settings')
async def menu_settings(callback: CallbackQuery):
    db = next(get_db())
    user = get_user_by_telegram_id(callback.from_user.id, db)
    
    if not user:
        await callback.message.edit_text(
            get_text('no_profile', 'ru'),
            reply_markup=get_main_menu_keyboard('ru')
        )
        return
    
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        reply_markup=get_settings_keyboard(user.language)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
@router.callback_query(lambda c: c.data == 'send_request')
async def send_request_handler(callback: CallbackQuery):
    db = next(get_db())
    user = get_user_by_telegram_id(callback.from_user.id, db)
    
    if not user:
        await callback.answer(get_text('error', 'ru'))
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–∏—Å–∫–∞
    if callback.from_user.id not in user_search_results:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    current_users = user_search_results[callback.from_user.id]
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π"
    current_user_index = 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data
    try:
        if hasattr(callback.message, 'reply_markup') and callback.message.reply_markup:
            for row in callback.message.reply_markup.inline_keyboard:
                for button in row:
                    if button.callback_data and button.callback_data.startswith('next_user_'):
                        current_user_index = int(button.callback_data.split('_')[2])
                        break
    except:
        current_user_index = 0
    
    if current_user_index >= len(current_users):
        current_user_index = 0
    
    target_user = current_users[current_user_index]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
    if not can_send_request(user.id, db):
        await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
    request = create_request(user.id, target_user.id, db)
    if request:
        await callback.answer(get_text('request_sent', user.language))
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                target_user.telegram_id,
                get_text('request_received', user.language),
                reply_markup=get_request_actions_keyboard(request.id, user.language)
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    else:
        await callback.answer("–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
@router.callback_query(lambda c: c.data.startswith(('accept_request_', 'decline_request_')))
async def handle_request_action(callback: CallbackQuery):
    action, request_id = callback.data.split('_', 1)
    request_id = int(request_id)
    
    db = next(get_db())
    user = get_user_by_telegram_id(callback.from_user.id, db)
    
    if not user:
        await callback.answer(get_text('error', 'ru'))
        return
    
    request = get_request_by_id(request_id, db)
    if not request or request.to_user_id != user.id:
        await callback.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if action == 'accept_request':
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å
        update_request_status(request_id, 'accepted', db)
        await callback.message.edit_text(get_text('request_accepted', user.language))
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        try:
            from_user = db.query(User).filter(User.id == request.from_user_id).first()
            if from_user and user.username:
                await bot.send_message(
                    from_user.telegram_id,
                    get_text('username_shared', user.language, username=user.username)
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    elif action == 'decline_request':
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        update_request_status(request_id, 'declined', db)
        await callback.message.edit_text(get_text('request_declined', user.language))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(lambda c: c.data.startswith('next_user'))
async def next_user_handler(callback: CallbackQuery):
    if callback.from_user.id not in user_search_results:
        await callback.answer("–û—à–∏–±–∫–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    users = user_search_results[callback.from_user.id]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    current_index = 0
    try:
        if callback.data != 'next_user':
            current_index = int(callback.data.split('_')[2])
    except:
        current_index = 0
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_index + 1 < len(users):
        next_index = current_index + 1
        await show_user_profile(callback.message, users[next_index], next_index, 'ru')
    else:
        await callback.message.edit_text(
            get_text('no_results', 'ru'),
            reply_markup=get_main_menu_keyboard('ru')
        )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def show_main_menu(message: Message, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.edit_text(
        get_text('main_menu', lang),
        reply_markup=get_main_menu_keyboard(lang)
    )

async def show_user_profile(message: Message, user: User, index: int, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile_text = get_user_profile_text(user, lang)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω–¥–µ–∫—Å–æ–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text('send_request', lang), callback_data="send_request")],
        [InlineKeyboardButton(text=get_text('next_user', lang), callback_data=f"next_user_{index}")],
        [InlineKeyboardButton(text=get_text('back_to_menu', lang), callback_data="back_to_main")]
    ])
    
    await message.edit_text(profile_text, reply_markup=keyboard)

async def show_request(message: Message, request: Request, lang: str = 'ru'):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å"""
    db = next(get_db())
    from_user = db.query(User).filter(User.id == request.from_user_id).first()
    
    request_text = f"üì® {get_text('request_received', lang)}\n\n"
    if from_user:
        request_text += f"–û—Ç: {from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"
    
    await message.edit_text(
        request_text,
        reply_markup=get_request_actions_keyboard(request.id, lang)
    )

# HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è healthcheck
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {self.path}")
        
        try:
            if self.path in ['/', '/health']:
                self.send_response(200)
                self.send_header('Content-type', 'text/plain; charset=utf-8')
                self.end_headers()
                response = "OK - Dating Bot is running!"
                self.wfile.write(response.encode('utf-8'))
                print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: 200 OK –¥–ª—è {self.path}")
            else:
                self.send_response(404)
                self.end_headers()
                print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: 404")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            try:
                self.send_response(500)
                self.end_headers()
            except:
                pass

    def log_message(self, format, *args):
        print(f"HTTP: {format % args}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ
def run_http_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ"""
    port = int(os.environ.get("PORT", 8000))
    print(f"üåê –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    try:
        server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
        print(f"‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:{port}")
        server.serve_forever()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    print("=== –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not check_database_connection():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        create_tables()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        dp.include_router(router)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        http_thread = threading.Thread(target=run_http_server, daemon=True)
        http_thread.start()
        print("‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await asyncio.sleep(3)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await dp.start_polling(bot)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 