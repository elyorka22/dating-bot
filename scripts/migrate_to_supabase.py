#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ Supabase PostgreSQL
"""

import os
import sys
import json
from datetime import datetime
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.models import User, SearchSettings, AccessRequest, AllowedContact
from config import DATABASE_URL

load_dotenv()

def migrate_data():
    """–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –≤ PostgreSQL"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL
    if not DATABASE_URL.startswith('postgresql'):
        print("‚ùå DATABASE_URL –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ PostgreSQL")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –¥–ª—è Supabase")
        return False
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
        engine = create_engine(DATABASE_URL)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL...")
        from database.models import Base
        Base.metadata.create_all(bind=engine)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        db = SessionLocal()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL
        existing_users = db.query(User).count()
        if existing_users > 0:
            print(f"‚ö†Ô∏è  –í PostgreSQL —É–∂–µ –µ—Å—Ç—å {existing_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (y/N): ")
            if response.lower() != 'y':
                return False
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        sqlite_url = "sqlite:///dating_bot.db"
        sqlite_engine = create_engine(sqlite_url)
        sqlite_SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=sqlite_engine)
        sqlite_db = sqlite_SessionLocal()
        
        print("üì§ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("üë• –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users = sqlite_db.query(User).all()
        for user in users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = db.query(User).filter(User.telegram_id == user.telegram_id).first()
            if not existing_user:
                new_user = User(
                    telegram_id=user.telegram_id,
                    username=user.username,
                    gender=user.gender,
                    age=user.age,
                    height=user.height,
                    weight=user.weight,
                    marital_status=user.marital_status,
                    interests=user.interests,
                    bio=user.bio,
                    is_active=user.is_active,
                    created_at=user.created_at,
                    updated_at=user.updated_at
                )
                db.add(new_user)
                print(f"  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω")
            else:
                print(f"  ‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        db.commit()
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
        print("‚öôÔ∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞...")
        search_settings = sqlite_db.query(SearchSettings).all()
        for setting in search_settings:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PostgreSQL
            user = db.query(User).filter(User.telegram_id == setting.user.telegram_id).first()
            if user:
                existing_setting = db.query(SearchSettings).filter(SearchSettings.user_id == user.id).first()
                if not existing_setting:
                    new_setting = SearchSettings(
                        user_id=user.id,
                        gender_preference=setting.gender_preference,
                        min_age=setting.min_age,
                        max_age=setting.max_age,
                        min_height=setting.min_height,
                        max_height=setting.max_height,
                        min_weight=setting.min_weight,
                        max_weight=setting.max_weight,
                        marital_status_preference=setting.marital_status_preference,
                        created_at=setting.created_at,
                        updated_at=setting.updated_at
                    )
                    db.add(new_setting)
                    print(f"  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        db.commit()
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ—Å—Ç—É–ø
        print("üì® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø...")
        access_requests = sqlite_db.query(AccessRequest).all()
        for request in access_requests:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ PostgreSQL
            from_user = db.query(User).filter(User.telegram_id == request.from_user.telegram_id).first()
            to_user = db.query(User).filter(User.telegram_id == request.to_user.telegram_id).first()
            
            if from_user and to_user:
                existing_request = db.query(AccessRequest).filter(
                    AccessRequest.from_user_id == from_user.id,
                    AccessRequest.to_user_id == to_user.id
                ).first()
                
                if not existing_request:
                    new_request = AccessRequest(
                        from_user_id=from_user.id,
                        to_user_id=to_user.id,
                        status=request.status,
                        created_at=request.created_at,
                        updated_at=request.updated_at
                    )
                    db.add(new_request)
                    print(f"  ‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç {from_user.telegram_id} –∫ {to_user.telegram_id} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        
        db.commit()
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        print("ü§ù –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
        allowed_contacts = sqlite_db.query(AllowedContact).all()
        for contact in allowed_contacts:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ PostgreSQL
            user1 = db.query(User).filter(User.telegram_id == contact.user1.telegram_id).first()
            user2 = db.query(User).filter(User.telegram_id == contact.user2.telegram_id).first()
            
            if user1 and user2:
                existing_contact = db.query(AllowedContact).filter(
                    AllowedContact.user1_id == user1.id,
                    AllowedContact.user2_id == user2.id
                ).first()
                
                if not existing_contact:
                    new_contact = AllowedContact(
                        user1_id=user1.id,
                        user2_id=user2.id,
                        created_at=contact.created_at
                    )
                    db.add(new_contact)
                    print(f"  ‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –º–µ–∂–¥—É {user1.telegram_id} –∏ {user2.telegram_id} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        
        db.commit()
        
        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db.query(User).count()}")
        print(f"  ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞: {db.query(SearchSettings).count()}")
        print(f"  üì® –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø: {db.query(AccessRequest).count()}")
        print(f"  ü§ù –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {db.query(AllowedContact).count()}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False
    finally:
        if 'db' in locals():
            db.close()
        if 'sqlite_db' in locals():
            sqlite_db.close()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase PostgreSQL...")
    success = migrate_data()
    if success:
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!")
        sys.exit(1) 