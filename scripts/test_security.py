#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–≤–∞–ª–∏–¥–∞—Ü–∏—è + –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
"""

import os
import sys
import time

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_validators():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤"""
    print("üîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤...")
    
    try:
        from utils.validators import (
            validate_age, validate_height, validate_weight, validate_gender,
            validate_marital_status, validate_interests, validate_bio, sanitize_text
        )
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
        assert validate_age("25")[0] == True, "–í–∞–ª–∏–¥–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å"
        assert validate_age("150")[0] == False, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è"
        assert validate_age("abc")[0] == False, "–ù–µ—á–∏—Å–ª–æ–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è"
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–æ—Å—Ç–∞
        assert validate_height("170")[0] == True, "–í–∞–ª–∏–¥–Ω—ã–π —Ä–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å"
        assert validate_height("300")[0] == False, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ä–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è"
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–µ—Å–∞
        assert validate_weight("70")[0] == True, "–í–∞–ª–∏–¥–Ω—ã–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å"
        assert validate_weight("500")[0] == False, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –≤–µ—Å –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è"
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª–∞
        assert validate_gender("–ú—É–∂—á–∏–Ω–∞")[0] == True, "–í–∞–ª–∏–¥–Ω—ã–π –ø–æ–ª –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å"
        assert validate_gender("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")[0] == False, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–æ–ª –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è"
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
        assert validate_marital_status("–•–æ–ª–æ—Å—Ç/–ù–µ –∑–∞–º—É–∂–µ–º")[0] == True, "–í–∞–ª–∏–¥–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å"
        assert validate_marital_status("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")[0] == False, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è"
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        assert validate_interests(["–°–ø–æ—Ä—Ç", "–ú—É–∑—ã–∫–∞"])[0] == True, "–í–∞–ª–∏–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å"
        assert validate_interests(["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å"])[0] == False, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è"
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è
        assert validate_bio("–û–±—ã—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")[0] == True, "–í–∞–ª–∏–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å"
        assert validate_bio("a" * 600)[0] == False, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è"
        assert validate_bio("–°—Å—ã–ª–∫–∞: http://example.com")[0] == False, "–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –¥–æ–ª–∂–Ω–æ –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è"
        
        # –¢–µ—Å—Ç —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏
        assert sanitize_text("  <script>alert('test')</script>  ") == "alert('test')", "HTML —Ç–µ–≥–∏ –¥–æ–ª–∂–Ω—ã —É–¥–∞–ª—è—Ç—å—Å—è"
        assert sanitize_text("  –º–Ω–æ–≥–æ   –ø—Ä–æ–±–µ–ª–æ–≤  ") == "–º–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–æ–≤", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –¥–æ–ª–∂–Ω—ã –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å—Å—è"
        
        print("‚úÖ –í—Å–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤: {e}")
        return False

def test_rate_limiter():
    """–¢–µ—Å—Ç rate limiter"""
    print("\n‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiter...")
    
    try:
        from utils.rate_limiter import RateLimiter
        
        limiter = RateLimiter()
        user_id = 12345
        
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞
        assert limiter.is_allowed(user_id, 'message') == True, "–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω"
        assert limiter.get_remaining_requests(user_id, 'message') == 9, "–î–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è 9 –∑–∞–ø—Ä–æ—Å–æ–≤"
        
        # –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
        for i in range(10):
            limiter.is_allowed(user_id, 'message')
        
        assert limiter.is_allowed(user_id, 'message') == False, "–ü–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        assert limiter.get_remaining_requests(user_id, 'message') == 0, "–î–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è 0 –∑–∞–ø—Ä–æ—Å–æ–≤"
        
        # –¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤
        limiter.reset_user_limits(user_id)
        assert limiter.is_allowed(user_id, 'message') == True, "–ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω"
        
        print("‚úÖ Rate limiter —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è rate limiter: {e}")
        return False

def test_spam_protection():
    """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞"""
    print("\nüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞...")
    
    try:
        from utils.rate_limiter import spam_protection
        
        user_id = 54321
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        spam_check = spam_protection.check_message_spam(user_id, "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        assert spam_check['is_spam'] == False, "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å—Å—è —Å–ø–∞–º–æ–º"
        
        spam_check = spam_protection.check_message_spam(user_id, "–°–û–û–ë–©–ï–ù–ò–ï –í–°–ï–ú–ò –ó–ê–ì–õ–ê–í–ù–´–ú–ò –ë–£–ö–í–ê–ú–ò")
        assert spam_check['is_spam'] == True, "–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–ø—Å–µ –¥–æ–ª–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å—Å—è —Å–ø–∞–º–æ–º"
        assert spam_check['action'] == 'warn', "–ö–∞–ø—Å –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"
        
        spam_check = spam_protection.check_message_spam(user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π http://example.com")
        assert spam_check['is_spam'] == True, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –¥–æ–ª–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å—Å—è —Å–ø–∞–º–æ–º"
        assert spam_check['action'] == 'block', "–°—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è"
        
        spam_check = spam_protection.check_message_spam(user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è —Å–∏–º–≤–æ–ª–∞–º–∏ –∞–∞–∞–∞–∞–∞–∞")
        assert spam_check['is_spam'] == True, "–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã —Å—á–∏—Ç–∞—Ç—å—Å—è —Å–ø–∞–º–æ–º"
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_check = spam_protection.check_action_spam(user_id, 'search')
        assert action_check['is_spam'] == False, "–ü–µ—Ä–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å—Å—è —Å–ø–∞–º–æ–º"
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫
        spam_protection.record_error(user_id, 'invalid_inputs')
        spam_protection.record_error(user_id, 'repeated_errors')
        
        print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞: {e}")
        return False

def test_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
    print("\nüîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç...")
    
    try:
        from utils.validators import validate_age, sanitize_text
        from utils.rate_limiter import spam_protection
        
        user_id = 99999
        
        # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        spam_check = spam_protection.check_action_spam(user_id, 'message')
        assert spam_check['is_spam'] == False, "–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω"
        
        # 2. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        is_valid, age_value, error_msg = validate_age("25")
        assert is_valid == True, "–í–∞–ª–∏–¥–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å"
        assert age_value == 25, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω"
        
        # 3. –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        sanitized = sanitize_text("  <b>—Ç–µ–∫—Å—Ç</b>  ")
        assert sanitized == "—Ç–µ–∫—Å—Ç", "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîí –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n")
    
    tests = [
        ("–í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã", test_validators),
        ("Rate Limiter", test_rate_limiter),
        ("–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞", test_spam_protection),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç", test_integration)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.")
        return False

if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1) 