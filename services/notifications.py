from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup
from sqlalchemy.orm import Session
from sqlalchemy import and_

from database.database import get_db
from database.models import User, AccessRequest
from keyboards.inline import get_main_menu_keyboard

class NotificationService:
    def __init__(self, bot: Bot):
        self.bot = bot
    
    async def send_access_granted_notification(self, request_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞"""
        db = next(get_db())
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å
            access_request = db.query(AccessRequest).filter(AccessRequest.id == request_id).first()
            if not access_request:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            from_user = db.query(User).filter(User.id == access_request.from_user_id).first()
            to_user = db.query(User).filter(User.id == access_request.to_user_id).first()
            
            if not from_user or not to_user:
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º username –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            if to_user.username:
                username_text = f"@{to_user.username}"
            else:
                username_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª username"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª –¥–æ—Å—Ç—É–ø
            notification_text = f"üéâ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!\n\n"
            notification_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {to_user.gender}, {to_user.age} –ª–µ—Ç —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –¥–∞—Ç—å –≤–∞–º –¥–æ—Å—Ç—É–ø –≤ –ª–∏—á–∫—É.\n\n"
            notification_text += f"Username: {username_text}\n\n"
            notification_text += f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!"
            
            await self.bot.send_message(
                chat_id=from_user.telegram_id,
                text=notification_text,
                reply_markup=get_main_menu_keyboard()
            )
            
        except Exception as e:
            print(f"Error sending access granted notification: {e}")
        finally:
            db.close()
    
    async def send_new_request_notification(self, request_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –¥–æ—Å—Ç—É–ø"""
        db = next(get_db())
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å
            access_request = db.query(AccessRequest).filter(AccessRequest.id == request_id).first()
            if not access_request:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            from_user = db.query(User).filter(User.id == access_request.from_user_id).first()
            to_user = db.query(User).filter(User.id == access_request.to_user_id).first()
            
            if not from_user or not to_user:
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å
            notification_text = f"üì® –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø!\n\n"
            notification_text += f"üë§ {from_user.gender}, {from_user.age} –ª–µ—Ç\n"
            notification_text += f"üìè –†–æ—Å—Ç: {from_user.height} —Å–º\n"
            notification_text += f"‚öñÔ∏è –í–µ—Å: {from_user.weight} –∫–≥\n"
            notification_text += f"üíç –°—Ç–∞—Ç—É—Å: {from_user.marital_status}\n\n"
            
            if from_user.interests:
                try:
                    import json
                    interests = json.loads(from_user.interests)
                    if interests:
                        notification_text += f"üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(interests)}\n\n"
                except:
                    pass
            
            if from_user.bio:
                notification_text += f"üí¨ –û —Å–µ–±–µ:\n{from_user.bio}\n\n"
            
            notification_text += f"–•–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É username?"
            
            from keyboards.inline import get_access_request_keyboard
            keyboard = get_access_request_keyboard(request_id)
            
            await self.bot.send_message(
                chat_id=to_user.telegram_id,
                text=notification_text,
                reply_markup=keyboard
            )
            
        except Exception as e:
            print(f"Error sending new request notification: {e}")
        finally:
            db.close()
    
    async def send_daily_summary(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É"""
        db = next(get_db())
        
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
            from datetime import datetime, timedelta
            today = datetime.utcnow().date()
            
            # –ù–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            new_requests = db.query(AccessRequest).filter(
                and_(
                    AccessRequest.to_user_id == user.id,
                    AccessRequest.status == "pending",
                    AccessRequest.created_at >= today
                )
            ).count()
            
            # –ü—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            accepted_requests = db.query(AccessRequest).filter(
                and_(
                    AccessRequest.to_user_id == user.id,
                    AccessRequest.status == "accepted",
                    AccessRequest.created_at >= today
                )
            ).count()
            
            # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            sent_requests = db.query(AccessRequest).filter(
                and_(
                    AccessRequest.from_user_id == user.id,
                    AccessRequest.created_at >= today
                )
            ).count()
            
            if new_requests > 0 or accepted_requests > 0 or sent_requests > 0:
                summary_text = f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞\n\n"
                summary_text += f"üì® –ù–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {new_requests}\n"
                summary_text += f"‚úÖ –ü—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {accepted_requests}\n"
                summary_text += f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {sent_requests}\n\n"
                
                if new_requests > 0:
                    summary_text += f"üí° –£ –≤–∞—Å –µ—Å—Ç—å {new_requests} –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!\n"
                    summary_text += f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª 'üì® –ó–∞–ø—Ä–æ—Å—ã'"
                
                await self.bot.send_message(
                    chat_id=user_id,
                    text=summary_text,
                    reply_markup=get_main_menu_keyboard()
                )
            
        except Exception as e:
            print(f"Error sending daily summary: {e}")
        finally:
            db.close() 